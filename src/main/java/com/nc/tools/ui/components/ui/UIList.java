package com.nc.tools.ui.components.ui;

import com.nc.tools.ui.components.exceptions.DuplicateKeyException;
import com.nc.tools.ui.components.models.UIListKeyValuePair;
import com.nc.tools.ui.components.renderers.UIListRendererWithIcon;

import java.awt.Event;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem; 
import javax.swing.JPopupMenu;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Vivekanand
 */
public class UIList extends javax.swing.JPanel implements Serializable{

    private final DefaultListModel<UIListKeyValuePair> model = new DefaultListModel<>();
    private Image image = new ImageIcon(getClass().getResource("/com/nc/tools/ui/components/resources/icons8-opened-folder-24.png")).getImage(); 
    
    private final Map<String, String> elements = new TreeMap<>();
    
    private boolean hideKey;
    
    private JPopupMenu menu = new JPopupMenu();
    private JMenuItem edit = new JMenuItem("Edit");
    private JMenuItem showInExplorer = new JMenuItem("Show In Explorer");
    
    public UIList(Image image) {               
        this.image = image;        
    }

    public UIList(){        
        //list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);       
    }
    
    public void init() {
        initComponents();  
        initListeners();
    }    
    
    private void initListeners() {
        showInExplorer.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                openPath(getSelectedValue());
            }        
        });
    }
    
    public Set<String> getKeys() {       
        Set<String> keys = getAllElements().keySet();
        return keys != null ? keys : Collections.EMPTY_SET;
    }
            
    public Collection<String> getValues() {        
        Collection<String> values = getAllElements().values();
        return values != null ? values : Collections.EMPTY_LIST;
    }
   
    
    @Override
    public void addKeyListener(KeyListener listener) {
        list.addKeyListener(listener);
    }
    
    public void addClickListener(MouseListener listener) {
        list.addMouseListener(listener);
    }
    
    public void addListSelectionListener(ListSelectionListener listener) {
        list.addListSelectionListener(listener);
    }
    
    public void setSelectionMode(int mode) {        
        list.setSelectionMode(mode);
    }
    
    public void addEditListener(ActionListener listener) {
        edit.addActionListener(listener);
    }

    public void addShowInExplorerListener(ActionListener listener) {
        showInExplorer.addActionListener(listener);
    }  
     
    public Image getImage() {
        return image;
    }

    public void setImage(Image image) {
        this.image = image;
    }

    public boolean isHideKey() {
        return hideKey;
    }

    public void setHideKey(boolean hideKey) {
        this.hideKey = hideKey;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listScroll = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();

        setLayout(new java.awt.GridLayout(1, 0));

        listScroll.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        list.setFont(new java.awt.Font("Forte", 0, 14)); // NOI18N
        list.setModel(model);
        list.setCellRenderer(new UIListRendererWithIcon(this));
        list.setOpaque(false);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                listMouseReleased(evt);
            }
        });
        list.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listKeyReleased(evt);
            }
        });
        list.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listValueChanged(evt);
            }
        });
        listScroll.setViewportView(list);

        add(listScroll);
    }// </editor-fold>//GEN-END:initComponents

    private void listKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listKeyReleased
        if(Event.DELETE == evt.getKeyCode()){            
            onDelete();
        }
    }//GEN-LAST:event_listKeyReleased

    private void listValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listValueChanged
        if (!evt.getValueIsAdjusting()) {
            
        }
        
    }//GEN-LAST:event_listValueChanged

    private void listMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseReleased
        showPopup(evt);        
    }//GEN-LAST:event_listMouseReleased

    public void addElement(String key) {
        addElement(key, key);
    }
    
    public void addElement(String key, String value) throws DuplicateKeyException{
        if(!elements.containsKey(key)){
            elements.put(key, value);
            model.addElement(new UIListKeyValuePair(key, value));
            list.ensureIndexIsVisible( list.getModel().getSize() -1 );
        } else {
            throw new DuplicateKeyException("Duplicate key ["+key+"] not allowed in this list");
        }
    }  
    
    public void setSelectedElements(List<String> keys){
        for(String key: keys) {
            String value = elements.get(key);                
            list.setSelectedValue(new UIListKeyValuePair(key, value), true);
        }
    }
    
    public List<UIListKeyValuePair> getSelectedValuesList(){
        return list.getSelectedValuesList();
    }
    
    public int[] getSelectedIndices(){
        return list.getSelectedIndices();
    }
    
    private void showPopup(MouseEvent e) {
        
        if(!e.isPopupTrigger()) {
                return;
        }
        int clicked = list.locationToIndex(e.getPoint());
        if(clicked != -1 && list.getCellBounds(clicked, clicked).contains(e.getPoint())) {
            list.setSelectedIndex(clicked);                        
            menu.show(list, e.getX(), e.getY());
        }
    }
    
    public void enableShowInFolderContextMenu() {
        addContextMenu(showInExplorer);
    }
    
    public void enableEditContextMenu() {
        addContextMenu(showInExplorer);
    }
    
    public void addContextMenu(JMenuItem menuItem) {
        menu.add(menuItem);
    }
    
    public List<String> getSelectedKeys(){
        List<String> keys = new ArrayList<>();
        List<UIListKeyValuePair> keyValues = getSelectedValuesList();
        
        for(UIListKeyValuePair kvp: keyValues) {
            keys.add(kvp.getKey());
        }
        return keys;
    }
    
    public Map<String, String> getAllElements(){    
        return elements;
    }  
    
    public void removeSelectedElements(){
        List<UIListKeyValuePair> keyValues = getSelectedValuesList();
        for(UIListKeyValuePair kvp: keyValues) {
            model.removeElement(kvp);
            elements.remove(kvp.getKey());
        }        
    }

    public String getSelectedKey() {
        return getSelectedValuesList().get(0).getKey();
    }
    
    public String getSelectedValue() {
        return getSelectedValuesList().get(0).getValue();
    }
    
    public void openPath(String path) {

        try {
            Runtime runtime = Runtime.getRuntime();
            runtime.exec("explorer.exe " + path);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
   
    public void clear(){
        model.removeAllElements();
        elements.clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<com.nc.tools.ui.components.models.UIListKeyValuePair> list;
    private javax.swing.JScrollPane listScroll;
    // End of variables declaration//GEN-END:variables

    public void onDelete(){
        removeSelectedElements();          
    }    

   
   
}
